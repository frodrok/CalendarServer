# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)

#### server part ####

## user ##
GET /users                  controllers.rest.UserRestController.allUsers()
GET /users/:userId              controllers.rest.UserRestController.getUser(userId: Int)
GET /users/username/:username   controllers.rest.UserRestController.getUserByUsername(username: String)

POST /users                 controllers.rest.UserRestController.register()
PUT /users/:userId           controllers.rest.UserRestController.update(userId: Int)

GET /validateuser     controllers.rest.UserRestController.login()

## event ##
GET /events                 controllers.rest.EventRestController.allEvents()
GET /users/:userId/events    controllers.rest.EventRestController.eventsForUserJson(userId: Int)
GET /events/:eventId        controllers.rest.EventRestController.getEvent(eventId: Int)

PUT /events/:eventId        controllers.rest.EventRestController.updateEvent(eventId: Int)
DELETE /events/:eventId     controllers.rest.EventRestController.deleteEvent(eventId: Int)

POST /events                controllers.rest.EventRestController.addEvent()

## temporary route for testing of list serialization
#uuuh options
OPTIONS /events             controllers.rest.EventRestController.serializeListOptionsTwo()
OPTIONS /events/:eventId    controllers.rest.EventRestController.serializeListOptions(eventId: Int)

OPTIONS /groups/:groupId    controllers.rest.EventRestController.serializeListOptionsSix(groupId: Int)
OPTIONS /groups    controllers.rest.EventRestController.serializeListOptionsSeven()


OPTIONS /licenses/:licenseId controllers.rest.EventRestController.serializeListOptionsFour(licenseId: Int)
OPTIONS /licenses          controllers.rest.EventRestController.serializeListOptionsThree()
OPTIONS /licenses/:licenseId/admins controllers.rest.EventRestController.serializeListOptionsFive(licenseId: Int)

OPTIONS /users/:userId  controllers.rest.EventRestController.serializeListOptionsEight(userId: Int)
OPTIONS /users          controllers.rest.EventRestController.serializeListOptionsNine()


## group ##
GET /groups             controllers.rest.GroupRestController.allGroups()
GET /groups/:groupId    controllers.rest.GroupRestController.getGroup(groupId: Int)
GET /groups/groupname/:groupName    controllers.rest.GroupRestController.getGroupByName(groupName: String)

POST /groups            controllers.rest.GroupRestController.addGroup()
PUT /groups/:groupId             controllers.rest.GroupRestController.updateGroup(groupId: Int)
# instead of DELETE you put and set active to false mafaka

## all users for a group
GET /groups/:groupId/users controllers.rest.UserRestController.allUsersForGroup(groupId: Int)

POST /licenses  controllers.rest.LicenseRestController.addLicense

GET /licenses   controllers.rest.LicenseRestController.allLicenses
GET /licenses/:id                 controllers.rest.LicenseRestController.getLicense(id: Int)

POST /licenses/:licenseId/admins               controllers.rest.LicenseRestController.addAdmin(licenseId: Int)
GET /licenses/:licenseId/admins        controllers.rest.LicenseRestController.adminsForLicense(licenseId: Int)
#PUT /licenses
#DELETE /license